generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id     String     @id @default(cuid())
  title  String
  status TaskStatus @default(PENDING)
  userId String     @map("user_id")

  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  TaskList    TaskList? @relation(fields: [taskListId], references: [id], onUpdate: NoAction, onDelete: SetNull)
  taskListId  String?   @map("task_list_id")

  @@index([userId])
  @@map("tasks")
}

enum TaskStatus {
  PENDING
  DONE
  IN_PROGRESS
  PAUSED
  CANCELED
}

model TaskList {
  id     String @id @default(cuid())
  title  String
  userId String @map("user_id")
  Tasks  Task[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("task_lists")
}

enum TransactionType {
  INCOME
  EXPENSE
  INVESTMENT
  PENSION
  WALLET
}

enum PaymentMethod {
  DEBIT
  CREDIT
  PIX
  TRANSFER
}

enum TransactionFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model Transaction {
  id                     String          @id @default(cuid())
  userId                 String          @map("user_id")
  description            String
  amount                 Decimal         @db.Decimal(10, 2)
  date                   DateTime
  type                   TransactionType
  paymentMethod          PaymentMethod   @map("payment_method")
  recurringTransactionId String?         @map("recurring_transaction_id")

  RecurringTransaction RecurringTransaction? @relation(fields: [recurringTransactionId], references: [id])

  @@index([userId, recurringTransactionId, date])
  @@map("transactions")
}

model RecurringTransaction {
  id                  String               @id @default(cuid())
  userId              String               @map("user_id")
  description         String
  referenceValue      Decimal              @map("reference_value") @db.Decimal(10, 2)
  expectedDayOfMonth  Int?                 @map("expected_day_of_month")
  expectedDayOfWeek   Int?                 @map("expected_day_of_week")
  expectedMonthOfYear Int?                 @map("expected_month_of_year")
  type                TransactionType
  paymentMethod       PaymentMethod        @map("payment_method")
  frequency           TransactionFrequency
  startDate           DateTime             @map("start_date")
  endDate             DateTime?            @map("end_date")

  Transactions Transaction[]

  @@index([userId, frequency, startDate, endDate])
  @@map("recurring_transactions")
}

enum TickerType {
  STOCK
  ETF
  REIT
  GOLD
  CRYPTO
  INTERNATIONAL
}

model Ticker {
  id            String     @id @default(cuid())
  symbol        String     @unique
  name          String
  type          TickerType
  price         Decimal    @db.Decimal(10, 2)
  change        Decimal?   @default(0) @db.Decimal(10, 2)
  changePercent Decimal?   @default(0) @map("change_percent") @db.Decimal(4, 3)
  autoUpdate    Boolean?   @default(false) @map("auto_update")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  TickerOrders TickerOrder[]

  @@map("tickers")
}

enum TickerOrderType {
  BUY
  SELL
}

model TickerOrder {
  id        String          @id @default(cuid())
  userId    String          @map("user_id")
  ticker    String
  type      TickerOrderType
  quantity  Int
  price     Decimal         @db.Decimal(10, 2)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")

  Ticker Ticker @relation(fields: [ticker], references: [symbol])

  @@index([userId, ticker, type])
  @@map("ticker_orders")
}

enum PosFixedIndexType {
  NONE
  CDI
  IPCA
  IGPM
  INPC
  SELIC
}

model FixedIncome {
  id                String            @id @default(cuid())
  userId            String            @map("user_id")
  description       String
  initialInvestment Decimal           @map("initial_investment") @db.Decimal(10, 2)
  currentValue      Decimal           @map("current_value") @db.Decimal(10, 2)
  date              DateTime          @map("date")
  dueDate           DateTime?         @map("due_date")
  fixedRate         Decimal           @default(0) @map("fixed_rate") @db.Decimal(10, 2)
  posFixedIndex     PosFixedIndexType @default(NONE) @map("pos_fixed_index")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  @@map("fixed_incomes")
}

enum OthersAssetsTypes {
  CASH_BOX
  PENSION
  PROPERTY
  SHARE
  FINANCIAL_INJECTION
}

model OtherAsset {
  id          String            @id @default(cuid())
  userId      String            @map("user_id")
  description String
  value       Decimal           @db.Decimal(10, 2)
  type        OthersAssetsTypes @map("type")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  @@map("other_assets")
}
